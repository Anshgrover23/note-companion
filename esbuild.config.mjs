import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import { promises as fsPromises } from "fs";
import { join } from "path";
import { fileURLToPath } from "url";

import inlineWorkerPlugin from "esbuild-plugin-inline-worker";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";
import * as fs from "fs";
import * as path from "path";
// Define the plugin
async function copyDir(src, dest) {
	await fsPromises.mkdir(dest, { recursive: true });
	let entries = await fsPromises.readdir(src, { withFileTypes: true });

	for (let entry of entries) {
		let srcPath = join(src, entry.name);
		let destPath = join(dest, entry.name);

		entry.isDirectory()
			? await copyDir(srcPath, destPath)
			: await fsPromises.copyFile(srcPath, destPath);
	}
}

const copyOnnxRuntimeNodePlugin = {
	name: "copy-onnxruntime-node",
	setup(build) {
		build.onEnd(async () => {
			const dirname = fileURLToPath(new URL(".", import.meta.url));
			const srcDir = join(dirname, "node_modules", "onnxruntime-node");
			const destDir = join(
				dirname,
				"dist",
				"node_modules",
				"onnxruntime-node"
			);
			await copyDir(srcDir, destDir);
		});
	},
};

let wasmPlugin = {
	name: "wasm",
	setup(build) {
		//   let path = require('path')
		//   let fs = require('fs')

		// Resolve ".wasm" files to a path with a namespace
		build.onResolve({ filter: /\.wasm$/ }, (args) => {
			if (args.resolveDir === "") {
				return; // Ignore unresolvable paths
			}
			return {
				path: path.isAbsolute(args.path)
					? args.path
					: path.join(args.resolveDir, args.path),
				namespace: "wasm-binary",
			};
		});
		// Virtual modules in the "wasm-binary" namespace contain the
		// actual bytes of the WebAssembly file. This uses esbuild's
		// built-in "binary" loader instead of manually embedding the
		// binary data inside JavaScript code ourselves.
		build.onLoad(
			{ filter: /.*/, namespace: "wasm-binary" },
			async (args) => ({
				contents: await fs.promises.readFile(args.path),
				loader: "binary",
			})
		);
	},
};
const nodePlugin = {
	name: "node-loader",
	setup(build) {
		build.onResolve({ filter: /\.node$/ }, (args) => {
			return { path: args.path, external: true };
		});
	},
};

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["hello.js"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		// "onnxruntime-node",
		// "sharp",
		...builtins,
	],
	format: "cjs",
	target: "es2022",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	platform: "node",
	treeShaking: true,
	outfile: "main.js",
	plugins: [
		nodePlugin,
		// copyOnnxRuntimeNodePlugin,

		inlineWorkerPlugin({
			platform: "node",
			format: "cjs",
			target: "es2022",
			plugins: [wasmPlugin],
		}),
	],
});

await context.rebuild();
process.exit(0);

// if (prod) {
//     await context.rebuild();
//     process.exit(0);
// } else {
//     await context.watch();
// }
